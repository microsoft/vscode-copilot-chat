trigger:
  batch: true
  branches:
    include:
      - main

pr: [main]

resources:
  repositories:
    - repository: templates
      type: github
      name: microsoft/vscode-engineering
      ref: main
      endpoint: Monaco

parameters:
  - name: nextVersion
    displayName: 'ðŸš€ Release Version (eg: none, major, minor, patch, prerelease, or X.X.X)'
    type: string
    default: 'none'

name: "$(Date:yyyyMMdd).$(Rev:r)${{ replace(format(' (ðŸš€ {0})', parameters.nextVersion), ' (ðŸš€ none)', '') }}"

extends:
  template: azure-pipelines/npm-package/pipeline.yml@templates
  parameters:
    npmPackages:
      - name: vscode-copilot-chat
        buildSteps:
          - task: NodeTool@0
            inputs:
              versionSpec: 22.x
            displayName: ðŸ›  Install Node.js (22.x)

          - bash: npm ci && npm run extract-chat-lib && rm -rf node_modules

          - script: npm ci
            workingDirectory: chat-lib

          - script: npm run build
            workingDirectory: chat-lib
        testPlatforms:
          - name: Linux
            nodeVersions: [22.x]
          - name: MacOS
            nodeVersions: [22.x]
          - name: Windows
            nodeVersions: [22.x]
        workingDirectory: chat-lib
        testSteps:
          - bash: npm ci && npm run extract-chat-lib && rm -rf node_modules

          - script: npm ci
            workingDirectory: chat-lib

          - script: npm run build
            workingDirectory: chat-lib

          - script: npm test
            workingDirectory: chat-lib
        # ${{ if or(eq(parameters.nextVersion, 'prerelease'), and(in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))) }}:
        ${{ if eq(parameters.nextVersion, 'prerelease') }}:
          publishPackage: true
          publishRequiresApproval: false
          nextVersion: prerelease
          tag: next
        ${{ elseif eq(parameters.nextVersion, 'none') }}:
          publishPackage: false
        ${{ else }}:
          publishPackage: true
          nextVersion: ${{ parameters.nextVersion }}
        ghCreateRelease: false
        ghReleaseAddChangeLog: false